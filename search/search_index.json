{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Introduction MIGI is a tool used to combine CS:GO mod addons together in order to toy with Valve's items_game and various other core game files, but also to give mappers, modders, fragmovie makers, a more friendly environement when working on CS:GO projects, allowing them to tweak a lot of aspects of the game without ever interfering with their vanilla install. Disclaimer This tool isn't associated or meant to be used with cheats, any mention of sv_pure bypassing or using the tool alongside cheats in official servers will get you banned from communities using MIGI the way it's meant to be used. Links ZooL's Discord for more informations, addons to download, updates.","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#introduction","text":"MIGI is a tool used to combine CS:GO mod addons together in order to toy with Valve's items_game and various other core game files, but also to give mappers, modders, fragmovie makers, a more friendly environement when working on CS:GO projects, allowing them to tweak a lot of aspects of the game without ever interfering with their vanilla install.","title":"Introduction"},{"location":"#disclaimer","text":"This tool isn't associated or meant to be used with cheats, any mention of sv_pure bypassing or using the tool alongside cheats in official servers will get you banned from communities using MIGI the way it's meant to be used.","title":"Disclaimer"},{"location":"#links","text":"ZooL's Discord for more informations, addons to download, updates.","title":"Links"},{"location":"0_Using_MIGI/0_Installation/","text":"Installation Remove any previous version of MIGI 2 along with the MIGI folder associated Download MIGI 3 Make MIGI's executable an exception to your anti-virus if flagged Put it inside your CS:GO installation folder next to CS:GO's executable Run as admin the first time to build the symbolic links Run MIGI again but normally It's not working! Check Troubleshooting Where do I find my CS:GO installation folder? Inside Steam:","title":"Installation"},{"location":"0_Using_MIGI/0_Installation/#installation","text":"Remove any previous version of MIGI 2 along with the MIGI folder associated Download MIGI 3 Make MIGI's executable an exception to your anti-virus if flagged Put it inside your CS:GO installation folder next to CS:GO's executable Run as admin the first time to build the symbolic links Run MIGI again but normally","title":"Installation"},{"location":"0_Using_MIGI/0_Installation/#its-not-working","text":"Check Troubleshooting","title":"It's not working!"},{"location":"0_Using_MIGI/0_Installation/#where-do-i-find-my-csgo-installation-folder","text":"Inside Steam:","title":"Where do I find my CS:GO installation folder?"},{"location":"0_Using_MIGI/1_Installing_addons/","text":"Installing Addons Introduction MIGI uses specific addon formats, either starting with the prefix m_ or p_ Addons are to be placed inside Counter-Strike Global Offensive/migi/csgo/addons/ Click inside MIGI to access it directly. Rules: As a mod user you should never rename downloaded addons. Some addons are made to be used offline or with people that have the same addons, those won't work online or in demos. Other addons are made for playing on sv_pure 0 servers or used in demos, those are limited but more compatible. Addons can't override the same weapon / item, if they do, either the game will crash or won't behave as intended. M _ (MIGI) VPKs M _ VPKs are standard MIGI addons, they have config files that get appended while generating the pak. Those can only be used offline or in lobbies if you're the host / have the same addon as the host. They usually replace game items like weapons, sounds, particles, and more. They're the fastest kind of addons. P _ (PAK) Folders P_ folders are addons overwriting files from the main P ak01 VPK. Depending on how the P _ addon is made, it should be compatible with demos and sv_pure 0 servers. Make sure to unzip those folders if they're compressed and that the P _ folder you're putting inside Counter-Strike Global Offensive/migi/csgo/addons/ contains the models/materials/other folders, otherwise they won't load. This is what you should have for instance: Other kinds of folders If an addon is neither a M _ or P _ addon, then they weren't made for MIGI and shouldn't be used, unless you know what you're doing. Those need to be converted and stripped from any full config replacements they could have if they're shipped with sounds or particles. Building and launching Once you're done installing addons, click the button at the center, then or add -game migi/csgo to your launch options (for tools like HLAE ) Keep in mind that each time you add or remove an addon, you'll need to build.","title":"Installing Addons"},{"location":"0_Using_MIGI/1_Installing_addons/#installing-addons","text":"","title":"Installing Addons"},{"location":"0_Using_MIGI/1_Installing_addons/#introduction","text":"MIGI uses specific addon formats, either starting with the prefix m_ or p_ Addons are to be placed inside Counter-Strike Global Offensive/migi/csgo/addons/ Click inside MIGI to access it directly.","title":"Introduction"},{"location":"0_Using_MIGI/1_Installing_addons/#rules","text":"As a mod user you should never rename downloaded addons. Some addons are made to be used offline or with people that have the same addons, those won't work online or in demos. Other addons are made for playing on sv_pure 0 servers or used in demos, those are limited but more compatible. Addons can't override the same weapon / item, if they do, either the game will crash or won't behave as intended.","title":"Rules:"},{"location":"0_Using_MIGI/1_Installing_addons/#m_-migi-vpks","text":"M _ VPKs are standard MIGI addons, they have config files that get appended while generating the pak. Those can only be used offline or in lobbies if you're the host / have the same addon as the host. They usually replace game items like weapons, sounds, particles, and more. They're the fastest kind of addons.","title":"M_ (MIGI) VPKs"},{"location":"0_Using_MIGI/1_Installing_addons/#p_-pak-folders","text":"P_ folders are addons overwriting files from the main P ak01 VPK. Depending on how the P _ addon is made, it should be compatible with demos and sv_pure 0 servers. Make sure to unzip those folders if they're compressed and that the P _ folder you're putting inside Counter-Strike Global Offensive/migi/csgo/addons/ contains the models/materials/other folders, otherwise they won't load. This is what you should have for instance:","title":"P_ (PAK) Folders"},{"location":"0_Using_MIGI/1_Installing_addons/#other-kinds-of-folders","text":"If an addon is neither a M _ or P _ addon, then they weren't made for MIGI and shouldn't be used, unless you know what you're doing. Those need to be converted and stripped from any full config replacements they could have if they're shipped with sounds or particles.","title":"Other kinds of folders"},{"location":"0_Using_MIGI/1_Installing_addons/#building-and-launching","text":"Once you're done installing addons, click the button at the center, then or add -game migi/csgo to your launch options (for tools like HLAE ) Keep in mind that each time you add or remove an addon, you'll need to build.","title":"Building and launching"},{"location":"0_Using_MIGI/2_Troubleshooting/","text":"Troubleshooting I was using the old MIGI tool, should I do something before using MIGI 3? Backup your addons and delete the whole MIGI folder just in case, then launch MIGI 3 to rebuild the whole structure MIGI doesn't open, nothing happens Solution 1 Update EdgeWebView (standalone x64) Launch migi.exe again Solution 2 Get cefpython3.zip Unzip it inside the newly created ./migi/ folder like so: I'm getting an \"Assertion Failed\" message when CS:GO launches If the message is about econ_item_system.cpp then it's an issue about the items_game given by an addon. Either the addon is corrupted, conflicting with another, or simply wasn't made for MIGI. MIGI says I can't launch as admin but I'm not launching as admin You've likely made your windows always open programs as admin. Reverting that is complicated as there's a lot of different ways to do it. I'm getting another issue that isn't listed here Join ZooL's Discord , ask your questions / issues in #help-migi","title":"Troubleshooting"},{"location":"0_Using_MIGI/2_Troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"0_Using_MIGI/2_Troubleshooting/#i-was-using-the-old-migi-tool-should-i-do-something-before-using-migi-3","text":"Backup your addons and delete the whole MIGI folder just in case, then launch MIGI 3 to rebuild the whole structure","title":"I was using the old MIGI tool, should I do something before using MIGI 3?"},{"location":"0_Using_MIGI/2_Troubleshooting/#migi-doesnt-open-nothing-happens","text":"","title":"MIGI doesn't open, nothing happens"},{"location":"0_Using_MIGI/2_Troubleshooting/#solution-1","text":"Update EdgeWebView (standalone x64) Launch migi.exe again","title":"Solution 1"},{"location":"0_Using_MIGI/2_Troubleshooting/#solution-2","text":"Get cefpython3.zip Unzip it inside the newly created ./migi/ folder like so:","title":"Solution 2"},{"location":"0_Using_MIGI/2_Troubleshooting/#im-getting-an-assertion-failed-message-when-csgo-launches","text":"If the message is about econ_item_system.cpp then it's an issue about the items_game given by an addon. Either the addon is corrupted, conflicting with another, or simply wasn't made for MIGI.","title":"I'm getting an \"Assertion Failed\" message when CS:GO launches"},{"location":"0_Using_MIGI/2_Troubleshooting/#migi-says-i-cant-launch-as-admin-but-im-not-launching-as-admin","text":"You've likely made your windows always open programs as admin. Reverting that is complicated as there's a lot of different ways to do it.","title":"MIGI says I can't launch as admin but I'm not launching as admin"},{"location":"0_Using_MIGI/2_Troubleshooting/#im-getting-another-issue-that-isnt-listed-here","text":"Join ZooL's Discord , ask your questions / issues in #help-migi","title":"I'm getting another issue that isn't listed here"},{"location":"1_Creating_addons/1_Types/","text":"What type of addon? Introduction As said in previous sections, MIGI uses two specific addon formats, either with the prefix p_ or m_ M _ VPKs Recommended M _ VPKs are what you should use most of the time, they're easier to share around as well. M_ Folders are \"src files\", this is what we use to generate the vpk file which is then used by the game. Once ready to test your addon, you need to click the button on the left to make it usable inside MIGI. If that button turns yellow it means your addon is outdated and needs to be rebuilt, if it's green it means it's up-to-date. You should then see a file named the same as your folder but with .vpk at the end. You can also create folder named #pak at the root to mimic what a P_ folder does. Example: m_myaddon/#pak/materials/panorama/images/equipment/ak47.svg which will then be moved to the Pak 01 on each full build. Note: Do not use #pak for every single file. Only files that are originally inside CS:GO's Pak 01 in order to replace them. P _ Folders Recommended for personal use and tests It is impossible to replace an existing asset unless overwritten inside a new Pak . MIGI supports doing so using those P _ folders, which gets their files added to the new additive Pak 01 when building. This is identical to what the #pak folder does on M _ addons except without the whole \"extracting from the vpk\" stuff. Note: While P _ folders can seem simply better, MIGI requires to copy their content ON EVERY FULL BUILD , which is also true for the #pak folder inside M _ addons. The more data P _ folders will have, the longer it'll take MIGI and VPK.EXE to copy those files and compress them in that new Pak 01. Only use them if you're certain that you need to replace all those files and cannot use a M _ vpk instead.","title":"What type of addon?"},{"location":"1_Creating_addons/1_Types/#what-type-of-addon","text":"","title":"What type of addon?"},{"location":"1_Creating_addons/1_Types/#introduction","text":"As said in previous sections, MIGI uses two specific addon formats, either with the prefix p_ or m_","title":"Introduction"},{"location":"1_Creating_addons/1_Types/#m_-vpks","text":"","title":"M_ VPKs"},{"location":"1_Creating_addons/1_Types/#recommended","text":"M _ VPKs are what you should use most of the time, they're easier to share around as well. M_ Folders are \"src files\", this is what we use to generate the vpk file which is then used by the game. Once ready to test your addon, you need to click the button on the left to make it usable inside MIGI. If that button turns yellow it means your addon is outdated and needs to be rebuilt, if it's green it means it's up-to-date. You should then see a file named the same as your folder but with .vpk at the end. You can also create folder named #pak at the root to mimic what a P_ folder does. Example: m_myaddon/#pak/materials/panorama/images/equipment/ak47.svg which will then be moved to the Pak 01 on each full build.","title":"Recommended"},{"location":"1_Creating_addons/1_Types/#note","text":"Do not use #pak for every single file. Only files that are originally inside CS:GO's Pak 01 in order to replace them.","title":"Note:"},{"location":"1_Creating_addons/1_Types/#p_-folders","text":"","title":"P_ Folders"},{"location":"1_Creating_addons/1_Types/#recommended-for-personal-use-and-tests","text":"It is impossible to replace an existing asset unless overwritten inside a new Pak . MIGI supports doing so using those P _ folders, which gets their files added to the new additive Pak 01 when building. This is identical to what the #pak folder does on M _ addons except without the whole \"extracting from the vpk\" stuff.","title":"Recommended for personal use and tests"},{"location":"1_Creating_addons/1_Types/#note_1","text":"While P _ folders can seem simply better, MIGI requires to copy their content ON EVERY FULL BUILD , which is also true for the #pak folder inside M _ addons. The more data P _ folders will have, the longer it'll take MIGI and VPK.EXE to copy those files and compress them in that new Pak 01. Only use them if you're certain that you need to replace all those files and cannot use a M _ vpk instead.","title":"Note:"},{"location":"1_Creating_addons/2_Addon_wizard/","text":"Addon wizard Once you've found what kind of addon you wish to make, click the button. Fields In the Create Addon window you'll be able to name your addon accordingly to your previous choice and choose to generate template files to get started. Inside the Folder field you should enter your prefixed addon name: either m_something or p_something Addon Info Located at the folder's root Addon Info will generate a template addon.json file that describes your addon to users. This file in JSON format will need to be filled and already has the needed fields. All fields can be omitted, if you don't have any collaborators, you can remove the authors list. The pre-filled values of each field should be pretty much self-explanatory. { name : [GENERATED JSON] for ##ADDON_NAME## , author : Author Name , social : An URL to one of your social network profiles , authors : [ { name : Author with link and role , social : https://www.youtube.com/user/Valve , role : What they did go there }, { name : Author name with no info } ], replacement : What it replaces } Addon Preview Located at the folder's root Addon Preview will copy a .PNG image to your addon folder, this image must always be named preview.png or preview.jpg and will appear on the left side of your addon's entry inside MIGI The recommended size is 100x50: Item Example Located in scripts/items/ Item Example will generate an items_game.txt with a example modded deagle and a brand new weapon on ID number 9201 for you. An items_game.txt edit inside a MIGI addon must always be named items_game_yourfoldername.txt without the addon type prefix. MIGI will later include that file by name inside a new items_game.txt automatically when building. Changes are additive. In this example, the Desert Eagle (id 1) will have its magazine bullets increased to 10, benefit from 50 bullets in reserve, have its recoil reduced and its firing sound changed to the SSG08's items_game { items { 1 { item_name Modded Deagle model_player models/weapons/v_pist_revolver.mdl attributes { primary clip size 10 primary reserve ammo max 50 recoil magnitude 30 } visuals { sound_single_shot Weapon_SSG08.Single } } } } Sounds Definitions Located in scripts/ A game_sounds config file will be allocated for your addon, it'll be included inside the game_sounds_manifest.txt on build. In a similar fashion to items_game.txt , you should name it game_sounds_yourfoldername.txt without the addon type prefix. See https://developer.valvesoftware.com/wiki/Soundscripts for more information. This option will generate an example weapon firing sound entry for you: Weapon_Mozambique.Single { channel CHAN_STATIC volume 1.0 pitch 160,180 soundlevel SNDLVL_79dB wave `)weapons/sawedoff/sawedoff-1.wav } Inventory Angles Located in resource/ui/econ/ Yet another config file, here this one controls how your model displays in the buymenu and inventory. Not much is known about how this file works. This file should be named itemmodelpanel_yourfoldername.res without the addon type prefix. Resource/UI/Econ/ItemModelPanelCharWeaponInspect.res { mozambique // unique name for the entry, the name itself doesn't matter. { rule { model v_pist_mozambique // What viewmodel it replaces, seems to be based on substrings. } config // Where the camera is placed and how it rotates. { camera_offset 44.57 18.35 -5.47 camera_orient 1.30 -135.29 0.00 orbit_pivot 20.88 -5.10 -6.23 item_rotate y[-360 360] x[ 0 0 ] } } } Playermodel Talker Located in scripts/talker/ This file controls how a playermodel should talk based on a Rule and Response system. It should be named yourfoldername.txt without the addon type prefix. See https://developer.valvesoftware.com/wiki/Response_System for more information. Response Radio.FireInTheHoleCUSTOM { scene scenes/pirate/Blinded01.vcd //I am blind scene scenes/pirate/Blinded02.vcd //Blinded! scene scenes/pirate/Blinded04.vcd //I can't see scene scenes/pirate/Blinded05.vcd //Blind scene scenes/pirate/Blinded06.vcd //Cannot see } Rule Radio.FireInTheHoleCUSTOM { criteria TLK_Radio.FireInTheHole Isprofessional_CUSTOM IsTalkprofessional_epic ApplyContext Talkcustom:1:1 applycontexttoworld Response Radio.FireInTheHoleCUSTOM } Particles Example Located in particles/ Particles Example will generate simple muzzleflash and bullet particle as an example on how to add .PCF particles to your addon. .PCF files can be modified and created with Alien Swarm using the -nop4 -tools launch options. It should be named yourfoldername.pcf without the addon type prefix. Note that particles must have its materials and the file itself in the built VPK in order to properly load. See https://developer.valvesoftware.com/wiki/Particle_Editor for more information. VScripts Example Located in scripts/vscripts/yourfoldername/ The main file should always be named main.nut You can of course include more files using IncludeScript(filename, scope) Check this section for the current implementations","title":"Addon wizard"},{"location":"1_Creating_addons/2_Addon_wizard/#addon-wizard","text":"Once you've found what kind of addon you wish to make, click the button.","title":"Addon wizard"},{"location":"1_Creating_addons/2_Addon_wizard/#fields","text":"In the Create Addon window you'll be able to name your addon accordingly to your previous choice and choose to generate template files to get started. Inside the Folder field you should enter your prefixed addon name: either m_something or p_something","title":"Fields"},{"location":"1_Creating_addons/2_Addon_wizard/#addon-info","text":"Located at the folder's root Addon Info will generate a template addon.json file that describes your addon to users. This file in JSON format will need to be filled and already has the needed fields. All fields can be omitted, if you don't have any collaborators, you can remove the authors list. The pre-filled values of each field should be pretty much self-explanatory. { name : [GENERATED JSON] for ##ADDON_NAME## , author : Author Name , social : An URL to one of your social network profiles , authors : [ { name : Author with link and role , social : https://www.youtube.com/user/Valve , role : What they did go there }, { name : Author name with no info } ], replacement : What it replaces }","title":"Addon Info"},{"location":"1_Creating_addons/2_Addon_wizard/#addon-preview","text":"Located at the folder's root Addon Preview will copy a .PNG image to your addon folder, this image must always be named preview.png or preview.jpg and will appear on the left side of your addon's entry inside MIGI The recommended size is 100x50:","title":"Addon Preview"},{"location":"1_Creating_addons/2_Addon_wizard/#item-example","text":"Located in scripts/items/ Item Example will generate an items_game.txt with a example modded deagle and a brand new weapon on ID number 9201 for you. An items_game.txt edit inside a MIGI addon must always be named items_game_yourfoldername.txt without the addon type prefix. MIGI will later include that file by name inside a new items_game.txt automatically when building. Changes are additive. In this example, the Desert Eagle (id 1) will have its magazine bullets increased to 10, benefit from 50 bullets in reserve, have its recoil reduced and its firing sound changed to the SSG08's items_game { items { 1 { item_name Modded Deagle model_player models/weapons/v_pist_revolver.mdl attributes { primary clip size 10 primary reserve ammo max 50 recoil magnitude 30 } visuals { sound_single_shot Weapon_SSG08.Single } } } }","title":"Item Example"},{"location":"1_Creating_addons/2_Addon_wizard/#sounds-definitions","text":"Located in scripts/ A game_sounds config file will be allocated for your addon, it'll be included inside the game_sounds_manifest.txt on build. In a similar fashion to items_game.txt , you should name it game_sounds_yourfoldername.txt without the addon type prefix. See https://developer.valvesoftware.com/wiki/Soundscripts for more information. This option will generate an example weapon firing sound entry for you: Weapon_Mozambique.Single { channel CHAN_STATIC volume 1.0 pitch 160,180 soundlevel SNDLVL_79dB wave `)weapons/sawedoff/sawedoff-1.wav }","title":"Sounds Definitions"},{"location":"1_Creating_addons/2_Addon_wizard/#inventory-angles","text":"Located in resource/ui/econ/ Yet another config file, here this one controls how your model displays in the buymenu and inventory. Not much is known about how this file works. This file should be named itemmodelpanel_yourfoldername.res without the addon type prefix. Resource/UI/Econ/ItemModelPanelCharWeaponInspect.res { mozambique // unique name for the entry, the name itself doesn't matter. { rule { model v_pist_mozambique // What viewmodel it replaces, seems to be based on substrings. } config // Where the camera is placed and how it rotates. { camera_offset 44.57 18.35 -5.47 camera_orient 1.30 -135.29 0.00 orbit_pivot 20.88 -5.10 -6.23 item_rotate y[-360 360] x[ 0 0 ] } } }","title":"Inventory Angles"},{"location":"1_Creating_addons/2_Addon_wizard/#playermodel-talker","text":"Located in scripts/talker/ This file controls how a playermodel should talk based on a Rule and Response system. It should be named yourfoldername.txt without the addon type prefix. See https://developer.valvesoftware.com/wiki/Response_System for more information. Response Radio.FireInTheHoleCUSTOM { scene scenes/pirate/Blinded01.vcd //I am blind scene scenes/pirate/Blinded02.vcd //Blinded! scene scenes/pirate/Blinded04.vcd //I can't see scene scenes/pirate/Blinded05.vcd //Blind scene scenes/pirate/Blinded06.vcd //Cannot see } Rule Radio.FireInTheHoleCUSTOM { criteria TLK_Radio.FireInTheHole Isprofessional_CUSTOM IsTalkprofessional_epic ApplyContext Talkcustom:1:1 applycontexttoworld Response Radio.FireInTheHoleCUSTOM }","title":"Playermodel Talker"},{"location":"1_Creating_addons/2_Addon_wizard/#particles-example","text":"Located in particles/ Particles Example will generate simple muzzleflash and bullet particle as an example on how to add .PCF particles to your addon. .PCF files can be modified and created with Alien Swarm using the -nop4 -tools launch options. It should be named yourfoldername.pcf without the addon type prefix. Note that particles must have its materials and the file itself in the built VPK in order to properly load. See https://developer.valvesoftware.com/wiki/Particle_Editor for more information.","title":"Particles Example"},{"location":"1_Creating_addons/2_Addon_wizard/#vscripts-example","text":"Located in scripts/vscripts/yourfoldername/ The main file should always be named main.nut You can of course include more files using IncludeScript(filename, scope) Check this section for the current implementations","title":"VScripts Example"},{"location":"1_Creating_addons/3_Notes/","text":"Notes Included files Config and script files such as scripts/items/items_game_youraddonname.txt , scripts/vscripts/youraddonname/main.nut , scripts/game_sounds_youraddonname.txt etc... can be directly placed inside the migi/csgo/ folders instead of the addon's as long as the addon exists, MIGI will still account for those files and will include them during the build. Just make sure that you don't forget to move them back to their respective addons once done tweaking them. The same can be said for other assets as long as they don't replace existing ones inside Pak01 Addons and demos Only specific files can work on demos. Demos don't behave the same as a live match, for instance weapons are loaded by model name and not with items_game.txt and their animations are handled with their sequence index, meaning most weapon mods won't work with them unless created for that purpose. If you were to make addons for demos, you'd have to replace the assets at their sources, therefore using a P _ folder. The same can be said about particles, they might just not load. Social links Social links are whitelisted using a list on MIGI's github page , only those can be used inside addon.json .","title":"Notes"},{"location":"1_Creating_addons/3_Notes/#notes","text":"","title":"Notes"},{"location":"1_Creating_addons/3_Notes/#included-files","text":"Config and script files such as scripts/items/items_game_youraddonname.txt , scripts/vscripts/youraddonname/main.nut , scripts/game_sounds_youraddonname.txt etc... can be directly placed inside the migi/csgo/ folders instead of the addon's as long as the addon exists, MIGI will still account for those files and will include them during the build. Just make sure that you don't forget to move them back to their respective addons once done tweaking them. The same can be said for other assets as long as they don't replace existing ones inside Pak01","title":"Included files"},{"location":"1_Creating_addons/3_Notes/#addons-and-demos","text":"Only specific files can work on demos. Demos don't behave the same as a live match, for instance weapons are loaded by model name and not with items_game.txt and their animations are handled with their sequence index, meaning most weapon mods won't work with them unless created for that purpose. If you were to make addons for demos, you'd have to replace the assets at their sources, therefore using a P _ folder. The same can be said about particles, they might just not load.","title":"Addons and demos"},{"location":"1_Creating_addons/3_Notes/#social-links","text":"Social links are whitelisted using a list on MIGI's github page , only those can be used inside addon.json .","title":"Social links"},{"location":"2_More_features/1_VScripts/","text":"VScripts VScripts can be used in MIGI on hosts to tweak entities. The current implementation offers an entity for your script that never gets reset by rounds. If you need to edit your script while playing, you'll need to restart the map (not the round) by using changelevel mapname , otherwise you'll need to setup your code to be reloadable with a function or something. The main script has to be named main.nut and be placed in scripts/vscripts/yourfoldername/ , yourfoldername being your MIGI addon's folder name without its (p_/m_) prefix. See https://developer.valvesoftware.com/wiki/VScript for more information about VScripts. Utility Variables migi_addons List of all the addons names as strings with their prefix (eg. \"p_ak_gold\") migi_weapons List of all the weapons currently in-game (MIGI and CS:GO). The structure of each item is identical to items_game.txt . All values are strings, but you can always parse them with tointeger() tofloat() etc... A few changes have been made to accommodate VScripts: Spaces becomes underscores: in game price - in_game_price Keys starting with numbers have an underscore prefix (mostly stickers): 0 - _0 Also includes additional keys for easier use: Key Description id Identifier of the item (previously the key of the item's table in items_game.txt) team Simplified used_by_classes that outputs the team the weapon is supposed to be for migi_addon Name of the addon this item comes from (including m/p prefix), will be \"null\" (string) if not from an addon translated_name English translated name of the item (if using translation strings) Utility Functions Signature Description void OnNewRound() Function executed automatically when a new round is detected table migi_getWeaponDataByKV( string key, string value ) Find a weapon from items_games by keyvalue string migi_getValueFromWeaponData( table weapon, string dict, string key ) Returns the value of the specified key in the dict. If dict is null, the root table will be searched table[] migi_getWeaponsByAddon( string addon_name ) Returns the list of weapon items from an addon migi_getWeaponDataByKV and migi_getValueFromWeaponData will both return null if the key or table containing the key couldn't be found. Example This script demonstrates every feature above, it prints to the host's console the weapons of each player on new rounds, but also the available addons. To demonstrate that the entity containing this script is kept between rounds, the round_number variable here is incremented and printed each round. round_number - 0; function OnNewRound() { round_number++; printl( NEW ROUND! current: + round_number); printl( \\nCurrent Addons: ); foreach( addon in migi_addons ) printl( \\t +addon); printl( \\nWeapons in the players' backpack: ) local w = null; while(w = Entities.FindByClassname(w, weapon_* )) { // weapons use viewmodels when on players local wpnData = migi_getWeaponDataByKV( model_player , w.GetModelName()); // couldn't find the weapon data related to the model_player if(!wpnData) continue; // get values from the weapon data // you can't be certain the item will have the specified key, this function circumvents it for you. local name = migi_getValueFromWeaponData(wpnData, , translated_name ); local type = migi_getValueFromWeaponData(wpnData, visuals , weapon_type ); local addon = (wpnData.migi_addon == null ? : ( +wpnData.migi_addon+ ) ); // again, it could be the knife, which has no price, the function will return null if not found local price = migi_getValueFromWeaponData(wpnData, attributes , in_game_price ); price = price == null ? : $ +price; // concat and print them printl( \\t- +w.GetOwner()+ \\t: +type+ | +name+price+addon); } } for(local i = 0; i 15; i++) printl( This print is only called when the map spawns! );","title":"VScripts"},{"location":"2_More_features/1_VScripts/#vscripts","text":"VScripts can be used in MIGI on hosts to tweak entities. The current implementation offers an entity for your script that never gets reset by rounds. If you need to edit your script while playing, you'll need to restart the map (not the round) by using changelevel mapname , otherwise you'll need to setup your code to be reloadable with a function or something. The main script has to be named main.nut and be placed in scripts/vscripts/yourfoldername/ , yourfoldername being your MIGI addon's folder name without its (p_/m_) prefix. See https://developer.valvesoftware.com/wiki/VScript for more information about VScripts.","title":"VScripts"},{"location":"2_More_features/1_VScripts/#utility-variables","text":"","title":"Utility Variables"},{"location":"2_More_features/1_VScripts/#migi_addons","text":"List of all the addons names as strings with their prefix (eg. \"p_ak_gold\")","title":"migi_addons"},{"location":"2_More_features/1_VScripts/#migi_weapons","text":"List of all the weapons currently in-game (MIGI and CS:GO). The structure of each item is identical to items_game.txt . All values are strings, but you can always parse them with tointeger() tofloat() etc... A few changes have been made to accommodate VScripts: Spaces becomes underscores: in game price - in_game_price Keys starting with numbers have an underscore prefix (mostly stickers): 0 - _0 Also includes additional keys for easier use: Key Description id Identifier of the item (previously the key of the item's table in items_game.txt) team Simplified used_by_classes that outputs the team the weapon is supposed to be for migi_addon Name of the addon this item comes from (including m/p prefix), will be \"null\" (string) if not from an addon translated_name English translated name of the item (if using translation strings)","title":"migi_weapons"},{"location":"2_More_features/1_VScripts/#utility-functions","text":"Signature Description void OnNewRound() Function executed automatically when a new round is detected table migi_getWeaponDataByKV( string key, string value ) Find a weapon from items_games by keyvalue string migi_getValueFromWeaponData( table weapon, string dict, string key ) Returns the value of the specified key in the dict. If dict is null, the root table will be searched table[] migi_getWeaponsByAddon( string addon_name ) Returns the list of weapon items from an addon migi_getWeaponDataByKV and migi_getValueFromWeaponData will both return null if the key or table containing the key couldn't be found.","title":"Utility Functions"},{"location":"2_More_features/1_VScripts/#example","text":"This script demonstrates every feature above, it prints to the host's console the weapons of each player on new rounds, but also the available addons. To demonstrate that the entity containing this script is kept between rounds, the round_number variable here is incremented and printed each round. round_number - 0; function OnNewRound() { round_number++; printl( NEW ROUND! current: + round_number); printl( \\nCurrent Addons: ); foreach( addon in migi_addons ) printl( \\t +addon); printl( \\nWeapons in the players' backpack: ) local w = null; while(w = Entities.FindByClassname(w, weapon_* )) { // weapons use viewmodels when on players local wpnData = migi_getWeaponDataByKV( model_player , w.GetModelName()); // couldn't find the weapon data related to the model_player if(!wpnData) continue; // get values from the weapon data // you can't be certain the item will have the specified key, this function circumvents it for you. local name = migi_getValueFromWeaponData(wpnData, , translated_name ); local type = migi_getValueFromWeaponData(wpnData, visuals , weapon_type ); local addon = (wpnData.migi_addon == null ? : ( +wpnData.migi_addon+ ) ); // again, it could be the knife, which has no price, the function will return null if not found local price = migi_getValueFromWeaponData(wpnData, attributes , in_game_price ); price = price == null ? : $ +price; // concat and print them printl( \\t- +w.GetOwner()+ \\t: +type+ | +name+price+addon); } } for(local i = 0; i 15; i++) printl( This print is only called when the map spawns! );","title":"Example"},{"location":"2_More_features/2_Patch_folder/","text":"Patch How it works The #patch materials folder is located at migi/csgo/materials/#patch/ and makes MIGI create patched Pak01 files to this location. Essentially, putting existing VMT files from the Pak01 to the same location but instead of the standard csgo/materials/ you'd put them in csgo/materials/#patch/ , will transform the originals to include that file and lose their original parameters. Example You want to test modifications on pak01/materials/models/chicken/chicken.vmt without rebuilding MIGI each time. Simply copy that file to migi/csgo/materials/#patch/models/chicken/chicken.vmt and this file will be loaded instead. While in this folder, those VMTs are considered normal VMTs by the game, so path rules for VTF files still apply, in other words: #patch is considered as an actual folder. Once in-game you're free to modify those materials and execute mat_reloadmaterial yourmaterial at will, as you would with any custom material. Again, in order to patch materials, you must build after adding your new files and before entering the game. More information about the Patch \"shader\" used to allow this feature: https://developer.valvesoftware.com/wiki/Patch","title":"Patch"},{"location":"2_More_features/2_Patch_folder/#patch","text":"","title":"Patch"},{"location":"2_More_features/2_Patch_folder/#how-it-works","text":"The #patch materials folder is located at migi/csgo/materials/#patch/ and makes MIGI create patched Pak01 files to this location. Essentially, putting existing VMT files from the Pak01 to the same location but instead of the standard csgo/materials/ you'd put them in csgo/materials/#patch/ , will transform the originals to include that file and lose their original parameters.","title":"How it works"},{"location":"2_More_features/2_Patch_folder/#example","text":"You want to test modifications on pak01/materials/models/chicken/chicken.vmt without rebuilding MIGI each time. Simply copy that file to migi/csgo/materials/#patch/models/chicken/chicken.vmt and this file will be loaded instead. While in this folder, those VMTs are considered normal VMTs by the game, so path rules for VTF files still apply, in other words: #patch is considered as an actual folder. Once in-game you're free to modify those materials and execute mat_reloadmaterial yourmaterial at will, as you would with any custom material. Again, in order to patch materials, you must build after adding your new files and before entering the game. More information about the Patch \"shader\" used to allow this feature: https://developer.valvesoftware.com/wiki/Patch","title":"Example"},{"location":"2_More_features/3_Hijack/","text":"Hijack Introduction Named after the -hijack Source Engine launch option which it uses, this window can be accessed by clicking on the button at the bottom left of the tool. This feature allows you to run commands to the running CS:GO instance (only if launched from MIGI) but also run custom MIGI VScript functions from the click of a button. This isn't injection or anything of the sort, it's only running csgo.exe a second time with -insecure -hijack +commandname . It is best used in windowed or borderless mode, as you can simply click buttons and see the result directly, even better on two monitors. Hijack window: Commands Various commands and VScript calls are available The catch with some of the custom VScript functions is that they can be used even on sv_cheats 0 as VScripts can interact with entities directly, but keep in mind that most commands can only be used if you're the host. Host Button name Executed command(s) Description Show Console con_enable 1 showconsole Open the in-game console Video modes mat_setvideomode {f} {b} {w} {h} Change the current display mode and resolution \u2713 Changelevel game_type {type} game_mode {mode} changelevel {mapname} Change the current map to the specified map \u2713 Map game_type {type} game_mode {mode} map {mapname} Start the server to a new map Reload Material mat_reloadmaterial {material} Reload a material by substring. Also features an auto-reload toggle button on the left. Viewmodel viewmodel_offset_x {x} viewmodel_offset_x {y} viewmodel_offset_x {z} viewmodel_fov {fov} Viewmodel settings \u2713 Set Health script \"migi_setHealth(VALUE)\" Set the player's health \u2713 CT/T script \"migi_setTeam(TEAM)\" Set the player's team without respawning \u2713 Refill Money script \"migi_refillMoney()\" Max out the player's money \u2713 Refill Armor script \"migi_refillArmor()\" Max out the player's armor \u2713 Give Weapons - See Give Weapons / Custom {any console command} ex: say Hijack is rad!; ent_fire !self addoutput \"movetype 8\" Run console commands, can run multiple if separated by semicolons Give Weapons Give Weapons is a sub-window of Hijack allowing you to give yourself weapons based on what is available currently in the game. MIGI addons' items_game.txt will get parsed and will show on the left side of the window. CS:GO's items_game.txt will also show on the right. A search-bar is also available and can be used to search by item ID or item name. This uses the VScript functions MIGI adds, and is handled with a temporary game_player_equip entity. Modified weapons from CS:GO will only display on the left, while untouched weapons will show up on the right.","title":"Hijack"},{"location":"2_More_features/3_Hijack/#hijack","text":"","title":"Hijack"},{"location":"2_More_features/3_Hijack/#introduction","text":"Named after the -hijack Source Engine launch option which it uses, this window can be accessed by clicking on the button at the bottom left of the tool. This feature allows you to run commands to the running CS:GO instance (only if launched from MIGI) but also run custom MIGI VScript functions from the click of a button. This isn't injection or anything of the sort, it's only running csgo.exe a second time with -insecure -hijack +commandname . It is best used in windowed or borderless mode, as you can simply click buttons and see the result directly, even better on two monitors. Hijack window:","title":"Introduction"},{"location":"2_More_features/3_Hijack/#commands","text":"Various commands and VScript calls are available The catch with some of the custom VScript functions is that they can be used even on sv_cheats 0 as VScripts can interact with entities directly, but keep in mind that most commands can only be used if you're the host. Host Button name Executed command(s) Description Show Console con_enable 1 showconsole Open the in-game console Video modes mat_setvideomode {f} {b} {w} {h} Change the current display mode and resolution \u2713 Changelevel game_type {type} game_mode {mode} changelevel {mapname} Change the current map to the specified map \u2713 Map game_type {type} game_mode {mode} map {mapname} Start the server to a new map Reload Material mat_reloadmaterial {material} Reload a material by substring. Also features an auto-reload toggle button on the left. Viewmodel viewmodel_offset_x {x} viewmodel_offset_x {y} viewmodel_offset_x {z} viewmodel_fov {fov} Viewmodel settings \u2713 Set Health script \"migi_setHealth(VALUE)\" Set the player's health \u2713 CT/T script \"migi_setTeam(TEAM)\" Set the player's team without respawning \u2713 Refill Money script \"migi_refillMoney()\" Max out the player's money \u2713 Refill Armor script \"migi_refillArmor()\" Max out the player's armor \u2713 Give Weapons - See Give Weapons / Custom {any console command} ex: say Hijack is rad!; ent_fire !self addoutput \"movetype 8\" Run console commands, can run multiple if separated by semicolons","title":"Commands"},{"location":"2_More_features/3_Hijack/#give-weapons","text":"Give Weapons is a sub-window of Hijack allowing you to give yourself weapons based on what is available currently in the game. MIGI addons' items_game.txt will get parsed and will show on the left side of the window. CS:GO's items_game.txt will also show on the right. A search-bar is also available and can be used to search by item ID or item name. This uses the VScript functions MIGI adds, and is handled with a temporary game_player_equip entity. Modified weapons from CS:GO will only display on the left, while untouched weapons will show up on the right.","title":"Give Weapons"},{"location":"2_More_features/4_Themes/","text":"Themes The tool allows you to replace its colors and images. All custom theme files are located at Counter-Strike Global Offensive/migi/theme/ Those files are generated on launch if missing. There's no distribution method for themes, and only require you to overwrite those files. The custom theme will only load when MIGI starts, any edit will require a restart. Colors colors.json has all the available CSS classes that you can modify, use standard CSS colors in the value fields, either a defined color name or hexadecimal values. Default settings: { text-color : white , text-header : #c4b550 , text-select : #96892d , text-strikethrough : #a0aa95 , text-placeholder : #a0aa95 , text-disabled : #282e22 , text-disabled-shadow : #889180 , border-lite : #889180 , border-dark : #282e22 , border-focus-lite : #f3de54 , border-focus-dark : #857713 , background-lite : #4c5844 , background-dark : #3e4637 } Example of what can be achieved with it (original on the left, modified on the right) : Images Images inside img/ can also be replaced to your needs.","title":"Themes"},{"location":"2_More_features/4_Themes/#themes","text":"The tool allows you to replace its colors and images. All custom theme files are located at Counter-Strike Global Offensive/migi/theme/ Those files are generated on launch if missing. There's no distribution method for themes, and only require you to overwrite those files. The custom theme will only load when MIGI starts, any edit will require a restart.","title":"Themes"},{"location":"2_More_features/4_Themes/#colors","text":"colors.json has all the available CSS classes that you can modify, use standard CSS colors in the value fields, either a defined color name or hexadecimal values. Default settings: { text-color : white , text-header : #c4b550 , text-select : #96892d , text-strikethrough : #a0aa95 , text-placeholder : #a0aa95 , text-disabled : #282e22 , text-disabled-shadow : #889180 , border-lite : #889180 , border-dark : #282e22 , border-focus-lite : #f3de54 , border-focus-dark : #857713 , background-lite : #4c5844 , background-dark : #3e4637 } Example of what can be achieved with it (original on the left, modified on the right) :","title":"Colors"},{"location":"2_More_features/4_Themes/#images","text":"Images inside img/ can also be replaced to your needs.","title":"Images"},{"location":"2_More_features/5_Launch_options/","text":"Launch options MIGI 3 has only a few launch options, but can come in handy depending on your needs. More might come in the future. Create a shortcut of MIGI.EXE , rename it to what you want, right click the newly created shortcut - properties, and add those at the end of the Target path after the quotes if present. Parameter Description -offline Run MIGI in offline mode, it won't look for updates -nosteam Make the \"Launch MIGI\" button call for csgo.exe instead of Steam -addpixels X Y Add pixels to the windows in case the scale is wrong. X and Y must be positive integers -edge Force EdgeHTML as the rendering engine -chrome Force Chromium as the rendering engine -mshtml Force MSHTML as the rendering engine (not suitable, used for debugging)","title":"Launch options"},{"location":"2_More_features/5_Launch_options/#launch-options","text":"MIGI 3 has only a few launch options, but can come in handy depending on your needs. More might come in the future. Create a shortcut of MIGI.EXE , rename it to what you want, right click the newly created shortcut - properties, and add those at the end of the Target path after the quotes if present. Parameter Description -offline Run MIGI in offline mode, it won't look for updates -nosteam Make the \"Launch MIGI\" button call for csgo.exe instead of Steam -addpixels X Y Add pixels to the windows in case the scale is wrong. X and Y must be positive integers -edge Force EdgeHTML as the rendering engine -chrome Force Chromium as the rendering engine -mshtml Force MSHTML as the rendering engine (not suitable, used for debugging)","title":"Launch options"}]}